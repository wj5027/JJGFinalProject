<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Member">
	<resultMap type="com.kh.tsp.customer.model.vo.Member" id="MemberResultSet">
			<id property="member_no" column="MEMBER_NO"/>
			<result property="member_id" column="MEMBER_ID"/>
			<result property="member_pwd" column="MEMBER_PASSWORD"/>
			<result property="member_type" column="MEMBER_TYPE"/>
			<result property="id_type" column="ID_TYPE"/>
			<result property="oil" column="OIL"/>
			<result property="email" column="EMAIL"/>
			<result property="phone" column="PHONE"/>
			<result property="member_name" column="MEMBER_NAME"/>
			<result property="member_carNo" column="MEMBER_CARNO"/>
			<result property="status" column="STATUS"/>
			<result property="kakao_id" column="KAKAO_ID"/>
			<result property="bank_id" column="BANK_ID"/>
			<result property="bank_name" column="BANK_NAME"/>
			<result property="enroll_date" column="ENROLL_DATE"/>	
	</resultMap>


	<resultMap type="Parking" id="parkingResultSet">
			<id property="PARKING_NO" column="PARKING_NO"/>
			<result property="PARKING_NAME" column="PARKING_NAME"/>
			<result property="OPERATE_TYPE" column="OPERATE_TYPE"/>
			<result property="PARKING_TYPE" column="PARKING_TYPE"/>
			<result property="ROAD_ADDRESS" column="ROAD_ADDRESS"/>
			<result property="ADDRESS" column="ADDRESS"/>
			<result property="PARKING_SIZE" column="PARKING_SIZE"/>
			<result property="OPEN_DAYS" column="OPEN_DAYS"/>
			<result property="WEEKDAY_STIME" column="WEEKDAY_STIME"/>
			<result property="WEEKDAY_ETIME" column="WEEKDAY_ETIME"/>
			<result property="SAT_STIME" column="SAT_STIME"/>
			<result property="SAT_ETIME" column="SAT_ETIME"/>
			<result property="HOLIDAY_STIME" column="HOLIDAY_STIME"/>
			<result property="HOLIDAY_ETIME" column="HOLIDAY_ETIME"/>
			<result property="PRICE_INFO" column="PRICE_INFO"/>
			<result property="PARKING_NTIME" column="PARKING_NTIME"/>	
			<result property="PARKING_NPRICE" column="PARKING_NPRICE"/>
			<result property="PARKING_ATIME" column="PARKING_ATIME"/>
			<result property="PARKING_APRICE" column="PARKING_APRICE"/>
			<result property="PAY_TYPE" column="PAY_TYPE"/>
			<result property="REMARKS" column="REMARKS"/>
			<result property="LATITUDE" column="LATITUDE"/>
			<result property="LONGITUDE" column="LONGITUDE"/>
			<result property="PARKING_MANGEMENT" column="PARKING_MANGEMENT"/>
			<result property="MANAGEMENT_TEL" column="MANAGEMENT_TEL"/>
			<result property="MEMBER_NO" column="MEMBER_NO"/>
			<result property="LEFT_SIZE" column="LEFT_SIZE"/>
			<result property="STATUS" column="STATUS"/>
	</resultMap>
	
	<resultMap type="Reservation" id="reserveResultSet">
			<id property="resNo" column="RES_NO"/>
			<result property="resApplyDate" column="RES_APPLY_DATE"/>
			<result property="resDate" column="RES_DATE"/>
			<result property="status" column="STATUS"/>
			<result property="memberNo" column="MEMBER_NO"/>
			<result property="parkingNo" column="PARKING_NO"/>
			<result property="parkingName" column="PARKING_NAME"/>
			<result property="cancelReason" column="CANCEL_REASON"/>
			<result property="carNo" column="CAR_NO"/>
			<result property="reserveTime" column="RESERVETIME"/>
	</resultMap>

	<resultMap type="com.kh.tsp.customer.model.vo.Member" id="MemberResultSet2">
			<id property="member_no" column="MEMBER_NO"/>
			<result property="member_id" column="MEMBER_ID"/>
			<result property="member_pwd" column="MEMBER_PASSWORD"/>
			<result property="member_type" column="MEMBER_TYPE"/>
			<result property="id_type" column="ID_TYPE"/>
			<result property="oil" column="OIL"/>
			<result property="email" column="EMAIL"/>
			<result property="phone" column="PHONE"/>
			<result property="member_name" column="MEMBER_NAME"/>
			<result property="member_carNo" column="MEMBER_CARNO"/>
			<result property="status" column="STATUS"/>
			<result property="kakao_id" column="KAKAO_ID"/>
			<result property="bank_id" column="BANK_ID"/>
			<result property="bank_name" column="BANK_NAME"/>
			<result property="enroll_date" column="ENROLL_DATE"/>	
	</resultMap>
	
	<resultMap type="com.kh.tsp.customer.model.vo.CCoupon" id="CustomerCoupon">
			<id property="couponReqNo" column="COUPON_REQ_NO"/>
			<id property="couponNo" column="COUPON_NO"/>
			<id property="couponCRNo" column="COUPON_CR_NO"/>
			<result property="couponName" column="COUPON_NAME"/>
			<result property="couponStartDate" column="COUPON_START_DATE"/>
			<result property="couponEndDate" column="COUPON_END_DATE"/>
			<result property="parkingNo" column="PARKIN_NO"/>
			<result property="couponOdiscount" column="COUPON_ODISCOUNT"/>
			<result property="couponPdiscount" column="COUPON_PDISCOUNT"/>
			<result property="userMemberNo" column="MEMBER_NO"/>
			<result property="userDate" column="USER_DATE"/>
			<result property="userYN" column="USER_YN"/>
			<result property="latitude" column="LATITUDE"/>
			<result property="longitude" column="LONGITUDE"/>	
	</resultMap>
	
	<resultMap type="com.kh.tsp.customer.model.vo.OilList" id="OilListView">
			<id property="oilListNo" column="OIL_LIST_NO"/>
			<result property="oilListType" column="OIL_LIST_TYPE"/>
			<result property="oilListDate" column="OIL_LIST_DATE"/>
			<result property="oil" column="OIL"/>
			<result property="memberNo" column="MEMBER_NO"/>
			<result property="parkingNo" column="PARKING_NO"/>
			<result property="resNo" column="RES_NO"/>
			<result property="paymentNo" column="PAYMENT_NO"/>
			<result property="transNo" column="TRANS_NO"/>
			<result property="parkingName" column="PARKING_NAME"/>
	</resultMap>
	

	<resultMap type="com.kh.tsp.parkingceo.model.vo.ParkingCeoAttachmentVo" id="ParkingCeoAttachmentVo">
			<id property="fid" column="FID"/>
			<result property="bid" column="BID"/>
			<result property="origin_name" column="ORIGIN_NAME"/>
			<result property="change_name" column="CHANGE_NAME"/>
			<result property="file_path" column="FILE_PATH"/>
			<result property="upload_date" column="UPLOAD_DATE"/>
			<result property="file_level" column="FILE_LEVEL"/>
			<result property="status" column="STATUS"/>
			<result property="parking_no" column="PARKING_NO"/>
			<result property="board_no" column="BOARD_NO"/>
			<result property="parking_list_no" column="PARKING_LIST_NO"/>
	</resultMap>
	
	
	
	
	
	<select id="selectCheckMember" resultMap="MemberResultSet" parameterType="Member">
		SELECT * 
		FROM MEMBER
		WHERE MEMBER_ID = #{member_id}
		AND STATUS = 'Y'
	</select>

	<!-- 주차장 찾기 -->
	<select id="selectnearParkings" resultMap="parkingResultSet" parameterType="Points">
		SELECT *
		FROM PARKING
		WHERE STATUS='Y'
 		<!--  AND ADDRESS LIKE '%' || '서울' || '%'  -->
 		AND #{x01}>TO_NUMBER(LATITUDE)
 		AND TO_NUMBER(LATITUDE) >#{x00}
 		AND #{y01}>TO_NUMBER(LONGITUDE)
 		AND TO_NUMBER(LONGITUDE) >#{y00}
	
	</select>
	
	<select id="searchLocalParkings" resultMap="parkingResultSet" parameterType="String">
		SELECT * FROM parking
		WHERE status = 'Y'
		AND address LIKE '%' || #{keyword} || '%'
	</select>
	
	<!-- 사용자 - 주차장 이름 기준 검색 -->
	<select id="selectSearchTitleParking" resultMap="parkingResultSet" parameterType="string">
		SELECT *
		FROM PARKING
		WHERE STATUS='Y'
		AND parking_name LIKE '%' || #{keyword} || '%'
	</select>
	
	<!-- 사용자 - 주차장 주소 기준 검색 -->
	<select id="searchAddrParking" resultMap="parkingResultSet" parameterType="String">
		SELECT * FROM parking
		WHERE status = 'Y'
		AND address LIKE '%' || #{keyword} || '%'
	</select>
	
	<!-- 사용자 - 주차장 검색 갯수 조회 -->
	<select id="selectSearchTextCount" resultType="_int" parameterType="string">
		SELECT COUNT(*)
		FROM PARKING
		WHERE STATUS='Y'
		AND (parking_name LIKE '%' || #{keyword} || '%' OR address LIKE '%' || #{keyword} || '%')
	</select>
	
	<!-- 사용자 - 예약 조회 -->
	<select id="selectReserve" resultMap="reserveResultSet" parameterType="Member">
		SELECT r.res_no, r.res_apply_date, r.res_date, r.status, r.member_no, r.parking_no, p.parking_name, r.cancel_reason, r.car_no, TO_CHAR(r.res_date, 'RRRRMMDDHH24MI') AS RESERVETIME FROM parking_reservation r
		JOIN parking p ON(r.parking_no = p.parking_no)
		WHERE r.member_no = #{member_no}
		ORDER BY res_no DESC
	</select>

	<!-- 사용자 - 예약 조회 -->
	<select id="selectReservCount" resultType="_int" parameterType="Member">
		SELECT COUNT(*) FROM parking_reservation r
		JOIN parking p ON(r.parking_no = p.parking_no)
		WHERE r.member_no = #{member_no}
		ORDER BY res_no DESC
	</select>

	<select id="selectCheckKakao"  resultMap="MemberResultSet2" parameterType="String">
		SELECT * FROM
		MEMBER 
		WHERE STATUS = 'Y'
		AND KAKAO_ID = #{kakao_id}
	</select>
	
	<insert id="insertKakao" parameterType="Member">
		INSERT INTO MEMBER
		VALUES (MNO_SEQ.NEXTVAL, #{member_id}, #{member_pwd}, 'U', 'K', '0', #{email}, #{phone}, #{member_name}, #{member_carNo},
				'Y', #{member_id}, null, null, SYSDATE)
	</insert>
	

	<!-- 사용자 - 예약 취소 -->
	<update id="updateCancelReserve" parameterType="Reservation">
		UPDATE parking_reservation
		SET status = '취소', cancel_reason = TO_CHAR(SYSDATE, 'RRRR.MM.DD HH24:MI') || ' - 사용자 요청으로 취소되었습니다.'
		WHERE res_no = #{ resNo } AND member_no = #{ memberNo }
	</update>
	
	<!-- 사용자 - 예약시간 확인(1시간 이상인지) -->
	<select id="selectOneCancelAndReserveTime" resultType="String" parameterType="int">
		SELECT TRUNC((SYSDATE - res_date) * 24 * 60)
		FROM parking_reservation
		WHERE res_no = #{ resNo }
	</select>
	
	<!-- 사용자 - 예약 취소하여 조건이 맞으면 오일도 환불 -->
	<select id="updateCancelReserveOil" parameterType="Reservation">
		UPDATE member
	    SET oil = (SELECT oil FROM member WHERE member_no = #{ memberNo })
	        + 3 * (SELECT parking_nprice FROM parking WHERE parking_no = 
	        				(SELECT parking_no FROM parking_reservation WHERE res_no = #{resNo}))
	    WHERE member_no = #{ memberNo }
	</select>
	
	<!-- 사용자 - 예약 거절 사유 조회 -->
	<select id="selectCancelReason" resultType="String" parameterType="Reservation">
		SELECT cancel_reason FROM parking_reservation
		WHERE res_no = #{ resNo } AND member_no = #{ memberNo }
	</select>
	
	<!-- 사용자 - 쿠폰 조회 -->
	<select id="selectUserCoupon" resultMap="CustomerCoupon" parameterType="Member">
		SELECT * FROM coupon_create cu 
	    JOIN (SELECT c.amount, c.coupon_no, c.coupon_req_no, c.coupon_status, c.create_date, c.parking_no, cr.coupon_start_date, cr.coupon_end_date, cr.coupon_name,
            cr.coupon_odiscount, cr.coupon_pdiscount, cr.coupon_req_status, cr.coupon_type, cr.member_no, cr.refuse_reason, cr.remark
        FROM coupon c JOIN coupon_request_list cr ON (c.coupon_req_no = cr.coupon_req_no)) cl
	    ON (cu.coupon_no = cl.coupon_no)
        JOIN parking p
        ON (cl.parking_no = p.parking_no)
	    WHERE cu.member_no = #{ member_no }
	</select>
	

	<select id="idCheck" resultMap="MemberResultSet2" parameterType="String">
		SELECT MEMBER_ID FROM
		MEMBER 
		WHERE STATUS = 'Y'
		AND MEMBER_ID = #{member_id}
	</select>
	
	
	<insert id="insertMember" parameterType="Member">
	 INSERT INTO MEMBER
	 VALUES (MNO_SEQ.NEXTVAL, #{member_id}, #{member_pwd}, 'U', 'M', '0', #{email}, #{phone}, #{member_name}, #{member_carNo},
	 		'Y', null, null, null, SYSDATE)
	</insert>
	

	<insert id="insertCustomerOilCharge" parameterType="com.kh.tsp.customer.model.vo.ChargeOil">
		INSERT INTO oil_list (oil_list_no, oil_list_type, oil_list_date, oil, member_no, payment_no, trans_no)
		VALUES (OIL_LIST_SEQ.NEXTVAL, '충전', SYSDATE, #{ oil }, #{ memberNo }, #{ imp_uid }, #{ merchant_uid })
	</insert>
	
	<update id="updateCustomerOilCharge" parameterType="com.kh.tsp.customer.model.vo.ChargeOil">
		UPDATE member
		SET oil = #{oil} + (SELECT oil FROM member WHERE member_no = #{ memberNo })
		WHERE member_no = #{ memberNo }
	</update>

	<!-- 아이디 찾기 -->
	<select id="findId" resultMap="MemberResultSet2" parameterType="String">
		SELECT MEMBER_ID
		FROM MEMBER
		WHERE EMAIL = #{email}
	</select>


	<!-- 이메일 중복확인 -->
	<select id="emailChk" resultMap="MemberResultSet2" parameterType="String">
		SELECT EMAIL FROM
		MEMBER 
		WHERE STATUS = 'Y'
		AND EMAIL = #{email}
	</select>
	
	<!-- 암호화된 비밀번호 조회용 메소드 -->
	<select id="selectPwd" resultType="java.lang.String" parameterType="java.lang.String">
		SELECT MEMBER_PASSWORD
		FROM MEMBER
		WHERE MEMBER_ID=#{member_id}
		AND STATUS = 'Y'
	</select>
	

	<!-- 해당하는 오일 조회 -->
	<select id="searchOilList" resultMap="OilListView" parameterType="com.kh.tsp.customer.model.vo.OilList">
		<choose>
			<when test="selectedListInfo == '충전'">
				SELECT * FROM oil_list
				<where>
					(oil_list_type = '충전' OR oil_list_type = '결제취소') AND member_no = #{ memberNo }
					<choose>
						<when test="startDate != null and endDate == null">
							<![CDATA[
							AND oil_list_date >= #{ startDate }
							]]>
						</when>
						<when test="startDate == null and endDate != null">
							<![CDATA[
							AND oil_list_date <= #{ endDate }
							]]>
						</when>
						<when test="startDate != null and endDate != null">
							AND oil_list_date BETWEEN #{ startDate } AND #{ endDate }
						</when>
						<when test="startDate == null and endDate == null">
						
						</when>
					</choose>
				</where>
				ORDER BY oil_list_no DESC
			</when>
			<when test="selectedListInfo == '사용'">
				SELECT * FROM oil_list o JOIN parking p ON (o.parking_no = p.parking_no)
				<where>
					(o.oil_list_type = '사용' OR o.oil_list_type = '예약' OR o.oil_list_type = '예약취소') AND o.member_no = #{ memberNo }
					<choose>
						<when test="startDate != null and endDate == null">
							<![CDATA[
							AND oil_list_date >= #{ startDate }
							]]>
						</when>
						<when test="startDate == null and endDate != null">
							<![CDATA[
							AND oil_list_date <= #{ endDate }
							]]>
						</when>
						<when test="startDate != null and endDate != null">
							AND oil_list_date BETWEEN #{ startDate } AND #{ endDate }
						</when>
						<when test="startDate == null and endDate == null">
						
						</when>
					</choose>
				</where>
				ORDER BY oil_list_no DESC
			</when>
			<when test="selectedListInfo == '환불'">
				SELECT * FROM oil_list o JOIN parking p ON (o.parking_no = p.parking_no)
				<where>
					(o.oil_list_type = '환불' OR o.oil_list_type = '환불신청' OR o.oil_list_type = '환불취소') AND o.member_no = #{ memberNo }
					<choose>
						<when test="startDate != null and endDate == null">
							<![CDATA[
							AND oil_list_date >= #{ startDate }
							]]>
						</when>
						<when test="startDate == null and endDate != null">
							<![CDATA[
							AND oil_list_date <= #{ endDate }
							]]>
						</when>
						<when test="startDate != null and endDate != null">
							AND oil_list_date BETWEEN #{ startDate } AND #{ endDate }
						</when>
						<when test="startDate == null and endDate == null">
						
						</when>
					</choose>
				</where>
				ORDER BY oil_list_no DESC
			</when>
		</choose>	    
	</select>
	
	<!-- 해당 오일 페이징 처리용 쿼리 -->
	<select id="getOilListCount" resultType="_int" parameterType="com.kh.tsp.customer.model.vo.OilList">
		<choose>
			<when test="selectedListInfo == '충전'">
				SELECT COUNT(*) FROM oil_list
				<where>
					(oil_list_type = '충전' OR oil_list_type = '결제취소') AND member_no = #{ memberNo }
					<choose>
						<when test="startDate != null and endDate == null">
							<![CDATA[
							AND oil_list_date >= #{ startDate }
							]]>
						</when>
						<when test="startDate == null and endDate != null">
							<![CDATA[
							AND oil_list_date <= #{ endDate }
							]]>
						</when>
						<when test="startDate != null and endDate != null">
							AND oil_list_date BETWEEN #{ startDate } AND #{ endDate }
						</when>
						<when test="startDate == null and endDate == null">
						
						</when>
					</choose>
				</where>
			</when>
			<when test="selectedListInfo == '사용'">
				SELECT COUNT(*) FROM oil_list o JOIN parking p ON (o.parking_no = p.parking_no)
				<where>
					(o.oil_list_type = '사용' OR o.oil_list_type = '예약' OR o.oil_list_type = '예약취소') AND o.member_no = #{ memberNo }
					<choose>
						<when test="startDate != null and endDate == null">
							<![CDATA[
							AND oil_list_date >= #{ startDate }
							]]>
						</when>
						<when test="startDate == null and endDate != null">
							<![CDATA[
							AND oil_list_date <= #{ endDate }
							]]>
						</when>
						<when test="startDate != null and endDate != null">
							AND oil_list_date BETWEEN #{ startDate } AND #{ endDate }
						</when>
						<when test="startDate == null and endDate == null">
						
						</when>
					</choose>
				</where>
			</when>
			<when test="selectedListInfo == '환불'">
				SELECT * FROM oil_list o JOIN parking p ON (o.parking_no = p.parking_no)
				<where>
					(o.oil_list_type = '환불' OR o.oil_list_type = '환불신청' OR o.oil_list_type = '환불취소') AND o.member_no = #{ memberNo }
					<choose>
						<when test="startDate != null and endDate == null">
							<![CDATA[
							AND oil_list_date >= #{ startDate }
							]]>
						</when>
						<when test="startDate == null and endDate != null">
							<![CDATA[
							AND oil_list_date <= #{ endDate }
							]]>
						</when>
						<when test="startDate != null and endDate != null">
							AND oil_list_date BETWEEN #{ startDate } AND #{ endDate }
						</when>
						<when test="startDate == null and endDate == null">
						
						</when>
					</choose>
				</where>
			</when>
		</choose>
	</select>

	<!-- 이메일, 아이디랑 일치하는 유저 정보 찾기 -->
	<select id="chkForPwd" resultMap="MemberResultSet" parameterType="Member">
		SELECT * 
		FROM MEMBER
		WHERE MEMBER_ID = #{member_id}
		AND EMAIL = #{email}
		AND STATUS = 'Y'
	</select>
	
	<!-- 암호화된 임시비밀번호 등록 -->
	<update id="insertTempPwd" parameterType="Member" >
		UPDATE MEMBER
		SET MEMBER_PASSWORD = #{member_pwd}
		WHERE MEMBER_ID = #{member_id}
	</update>
	
	<!-- 내 정보 리스트 -->
	<select id="selectMyInfo" resultMap="MemberResultSet" parameterType="Member">
		SELECT * 
		FROM MEMBER
		WHERE MEMBER_ID= #{member_id}
		
	</select>
	
	<!-- 비밀번호 제외한 내 정보 수정 -->
	<update id="changeInfo" parameterType="Member">
		UPDATE MEMBER
		SET MEMBER_CARNO = #{member_carNo}, PHONE = #{phone}, EMAIL = #{email}
		WHERE MEMBER_ID = #{member_id}
		
	</update> 
	
	<!-- 비밀번호 포함한 내 정보 수정 -->
	<update id="changePwd" parameterType="Member">
		UPDATE MEMBER
		SET MEMBER_PASSWORD = #{member_pwd}, MEMBER_CARNO=#{member_carNo,jdbcType=VARCHAR}, PHONE = #{phone}, EMAIL = #{email}
		WHERE MEMBER_ID = #{member_id}
	</update>
	
	<!-- 사용자 - 오일 환불 신청 -->
	<insert id="intsertRequestRefund" parameterType="hashmap">
		INSERT INTO exchange (exchange_no, status,
							oil,
							cash,
							application_date,
							member_no,
							account_holder,
							application_bank,
							application_account_number)
		VALUES (EXCHANGE_NO_SEQ.NEXTVAL, '환불진행중', 
				(SELECT oil FROM oil_list WHERE oil_list_no = #{ oilListNo }),
				(SELECT oil / 1.1 FROM oil_list WHERE oil_list_no = #{ oilListNo }),
				SYSDATE,
				(SELECT member_no FROM oil_list WHERE oil_list_no = #{ oilListNo }),
				#{ accountHolder },
				#{ Application_bank },
				#{ application_account_number })
	</insert>
	
	<!--즐겨찾기 찾기  -->
	<select id="selectfavorites" resultType="String" parameterType="int">
	
	SELECT PARKING_NO 
	FROM FAVORITES
	 WHERE MEMBER_NO=#{mno}
	
	</select>
	<!--사진 찾아오기  -->
	<select id="selectParkingImg" resultMap="ParkingCeoAttachmentVo" parameterType="String">
	SELECT *
	FROM ATTACHMENT
	WHERE PARKING_NO=#{pno}
	AND STATUS='Y'
	</select>
	
	<!-- 네이버 아이디 유무 확인 -->
	<select id="chkNaver"  resultMap="MemberResultSet2" parameterType="String">
		SELECT * FROM
		MEMBER 
		WHERE STATUS = 'Y'
		AND MEMBER_ID = #{member_id}
	</select>
	
	<!-- 네이버 회원가입 -->
	<insert id="insertNaver" parameterType="Member">
		INSERT INTO MEMBER 
		VALUES (MNO_SEQ.NEXTVAL, #{member_id}, #{member_pwd}, 'U', 'N', '0', #{email}, #{phone}, #{member_name}, #{member_carNo},
				'Y', null, null, null, SYSDATE)
	</insert>
	
	<!-- 예약하기 Insert -->
	<insert id="insertRequestReserve" parameterType="Reservation">
		INSERT INTO parking_reservation (res_no, res_apply_date, res_date, status, member_no, parking_no, car_no)
		VALUES (RES_NO_SEQ.NEXTVAL, SYSDATE, TO_DATE('${ stringResDate }','mm-dd-yyyy hh24:mi'), 'Y', ${ memberNo }, ${ parkingNo }, '${ carNo }')
	</insert>
	

	
	<!--즐겨찾기 등록 -->
	<insert id="insertfavorite" parameterType="Hashmap">
	INSERT INTO FAVORITES VALUES (FAVORITES_SEQ.NEXTVAL,'${pno}',${mno})
	</insert>
	<delete id="deletefavorite" parameterType="Hashmap">
	DELETE FROM FAVORITES
	WHERE PARKING_NO='${pno}'
	AND MEMBER_NO=${mno}
	</delete>
	
	

	<!-- 사용자 - 오일 환불 시 차감 -->
	<update id="updateRequestRefund" parameterType="hashmap">
		UPDATE member
		SET oil = (SELECT oil FROM member WHERE member_no = (SELECT member_no FROM oil_list WHERE oil_list_no = #{ oilListNo })) - (SELECT oil FROM oil_list WHERE oil_list_no = #{ oilListNo })
		WHERE member_no = (SELECT member_no FROM oil_list WHERE oil_list_no = #{ oilListNo })
	</update>
	
	<!-- 사용자 - 오일 환불 시 Oil List 테이블에 기록 남김 -->
	<insert id="insertOilListRefund" parameterType="hashmap">
		INSERT INTO oil_list
		VALUES (OIL_LIST_SEQ.NEXTVAL, '환불신청', SYSDATE, (SELECT oil FROM oil_list WHERE oil_list_no = #{ oilListNo }), (SELECT member_no FROM oil_list WHERE oil_list_no = #{ oilListNo }), null,null,null,null);
	</insert>

</mapper>